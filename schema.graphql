type Pessoa {
  id: ID!
  nome: String!
  cpf: String!
  email: String!
  telefone: String!
  planosContratados: [PlanoContratado!]!
}

type Plano {
  id: ID!
  nome: String!
  valorCredito: Float!
  parcelas: Int!
  taxaAdmPercentual: Float!
  planosContratados: [PlanoContratado!]!
}

enum StatusPlano {
  ATIVO
  CONTEMPLADO
  INADIMPLENTE
  QUITADO
}

type PlanoContratado {
  id: ID!
  pessoa: Pessoa!
  plano: Plano!
  dataContratacao: String!
  status: StatusPlano!
  parcelasPagas: Int!
  parcelasRestantes: Int!
  valorParcela: Float!
  progressoPagamento: Float!
}

# Pagination Types
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
  totalCount: Int!
  currentPage: Int!
  totalPages: Int!
}

type PessoaConnection {
  edges: [PessoaEdge!]!
  pageInfo: PageInfo!
}

type PessoaEdge {
  node: Pessoa!
  cursor: String!
}

type PlanoConnection {
  edges: [PlanoEdge!]!
  pageInfo: PageInfo!
}

type PlanoEdge {
  node: Plano!
  cursor: String!
}

type PlanoContratadoConnection {
  edges: [PlanoContratadoEdge!]!
  pageInfo: PageInfo!
}

type PlanoContratadoEdge {
  node: PlanoContratado!
  cursor: String!
}

input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
  page: Int
  limit: Int = 10
}

type Query {
  # Pessoas
  pessoas(pagination: PaginationInput): PessoaConnection!
  pessoa(id: ID!): Pessoa
  pessoaPorCpf(cpf: String!): Pessoa
  pessoaPorEmail(email: String!): Pessoa
  
  # Planos
  planos(pagination: PaginationInput): PlanoConnection!
  plano(id: ID!): Plano
  planosPorValorCredito(min: Float, max: Float, pagination: PaginationInput): PlanoConnection!
  planosPorParcelas(min: Int, max: Int, pagination: PaginationInput): PlanoConnection!
  
  # Planos Contratados
  planosContratados(pagination: PaginationInput): PlanoContratadoConnection!
  planoContratado(id: ID!): PlanoContratado
  planosContratadosPorStatus(status: StatusPlano!, pagination: PaginationInput): PlanoContratadoConnection!
  planosContratadosPorPessoa(pessoaId: ID!, pagination: PaginationInput): PlanoContratadoConnection!
  planosContratadosPorPlano(planoId: ID!, pagination: PaginationInput): PlanoContratadoConnection!
  
  # Estat√≠sticas
  estatisticasGerais: EstatisticasGerais!
}

type Mutation {
  # Pessoas
  criarPessoa(input: CriarPessoaInput!): Pessoa!
  atualizarPessoa(id: ID!, input: AtualizarPessoaInput!): Pessoa!
  deletarPessoa(id: ID!): Boolean!
  
  # Planos
  criarPlano(input: CriarPlanoInput!): Plano!
  atualizarPlano(id: ID!, input: AtualizarPlanoInput!): Plano!
  deletarPlano(id: ID!): Boolean!
  
  # Planos Contratados
  contratarPlano(input: ContratarPlanoInput!): PlanoContratado!
  atualizarStatusPlano(id: ID!, status: StatusPlano!): PlanoContratado!
  pagarParcela(id: ID!): PlanoContratado!
  cancelarPlano(id: ID!): Boolean!
}

# Input Types
input CriarPessoaInput {
  nome: String!
  cpf: String!
  email: String!
  telefone: String!
}

input AtualizarPessoaInput {
  nome: String
  cpf: String
  email: String
  telefone: String
}

input CriarPlanoInput {
  nome: String!
  valorCredito: Float!
  parcelas: Int!
  taxaAdmPercentual: Float!
}

input AtualizarPlanoInput {
  nome: String
  valorCredito: Float
  parcelas: Int
  taxaAdmPercentual: Float
}

input ContratarPlanoInput {
  pessoaId: ID!
  planoId: ID!
  dataContratacao: String!
}

# Statistics Type
type EstatisticasGerais {
  totalPessoas: Int!
  totalPlanos: Int!
  totalPlanosContratados: Int!
  planosAtivos: Int!
  planosContemplados: Int!
  planosInadimplentes: Int!
  planosQuitados: Int!
  valorTotalCredito: Float!
  valorTotalArrecadado: Float!
} 